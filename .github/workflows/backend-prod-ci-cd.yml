name: Backend Prod CI/CD Workflow

on:
  push:
    branches: [ "main" ]
    paths:
      - "backend/**"
      - ".github/workflows/backend-prod-ci-cd.yml"
      - "Dockerfile"
  pull_request:
    branches: [ "main" ]
    paths:
      - "backend/**"
      - ".github/workflows/backend-prod-ci-cd.yml"
      - "Dockerfile"

jobs:

  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set Application yml for prod
        run: |
          echo "${{ secrets.APPLICATION_PROPERTIES_PROD }}" > src/main/resources/application.properties
          mkdir -p src/main/resources/fcm
          echo '${{ secrets.FCM_SECRET_KEY }}' > src/main/resources/fcm/chongdaemarket-fcm-key.json
          mkdir -p src/test/resources/fcm
          echo '${{ secrets.FCM_SECRET_KEY }}' > src/test/resources/fcm/chongdaemarket-fcm-key.json
        working-directory: ./backend

      - name: Build with Gradle Wrapper
        run: ./gradlew clean build -x copyOasToSwagger
        working-directory: ./backend

      - name: Docker build and push
        run: |
          docker login -u ${{ secrets.BE_DOCKERHUB_USERNAME }} -p ${{ secrets.BE_DOCKERHUB_PASSWORD }}
          docker build -t ${{ secrets.BE_DOCKER_IMAGE_NAME_PROD }} .
          docker tag ${{ secrets.BE_DOCKER_IMAGE_NAME_PROD }} ${{ secrets.BE_DOCKERHUB_USERNAME }}/${{ secrets.BE_DOCKER_IMAGE_NAME_PROD }}:${GITHUB_SHA::7}
          docker push ${{ secrets.BE_DOCKERHUB_USERNAME }}/${{ secrets.BE_DOCKER_IMAGE_NAME_PROD }}:${GITHUB_SHA::7}

  deploy-new-container:
    needs: build-and-test
    strategy:
    matrix:
      runner: [prod-a, prod-b]  # 두 서버 환경에서 병렬로 배포
    runs-on: [self-hosted, ${{ matrix.runner }}]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy new container
        run: |
          bash launch_next_container.sh ${GITHUB_SHA::7} prod ${{ secrets.BE_DOCKERHUB_USERNAME }} ${{ secrets.BE_DOCKER_IMAGE_NAME_PROD }}
        working-directory: backend/deploy

  switch-new-container:
    needs: deploy-new-container
    strategy:
    matrix:
      runner: [prod-a, prod-b]  # 두 서버 환경에서 병렬로 배포
    runs-on: [self-hosted, ${{ matrix.runner }}]
    steps:
      - name: Switch from old to new container
        run: |
          bash switch_blue_green_container.sh
        working-directory: backend/deploy